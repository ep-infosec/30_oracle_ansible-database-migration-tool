#Copyright (c) 2020, Oracle and/or its affiliates.
#The Universal Permissive License (UPL), Version 1.0
#
# Export TDE from non-cbd
#  

# Create old wallet backup directory on target (non-ExaCS)
- name: Create old wallet backup directory on target (non-ExaCS)
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  file:
    path: "{{ oracle_target_wallet_dir }}/{{ oracle_target_database_unique_name }}/backup" 
    state: directory
    owner: "{{ oracle_user }}"
  when: (convert_to_ExaCS == 'False') 

# Create old wallet backup directory on target (ExaCS)
- name: Create old wallet backup directory on target (ExaCS)
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  file:
    path: "{{ oracle_target_wallet_dir }}/backup" 
    state: directory
    owner: "{{ oracle_user }}"
  when: (convert_to_ExaCS == 'True') 

# Copy old wallet's ewallet.p12 and cwallet.sso to backup directory on target (non-ExaCS)
- name: Copy old wallet's ewallet.p12 and cwallet.sso to backup directory on target (non-ExaCS)
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  command: cp {{ oracle_target_wallet_dir }}/{{ oracle_target_database_unique_name }}/{{ item }} {{ oracle_target_wallet_dir }}/{{ oracle_target_database_unique_name }}/backup/
  with_items:
   - "ewallet.p12"
   - "cwallet.sso"
  when: (convert_to_ExaCS == 'False') 

# Copy old wallet's ewallet.p12 and cwallet.sso to backup directory on target (ExaCS)
- name: Copy old wallet's ewallet.p12 and cwallet.sso to backup directory on target (ExaCS)
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  command: cp {{ oracle_target_wallet_dir }}/{{ item }} {{ oracle_target_wallet_dir }}/backup/
  with_items:
   - "ewallet.p12"
   - "cwallet.sso"
  when: (convert_to_ExaCS == 'True') 

# Startup non-CDB database on target 
- name: Startup non-CDB database on target 
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  oracle_sqlplus_module:
    oracle_sid: "{{ oracle_source_database_sid }}"
    oracle_home: "{{ oracle_target_ohome_dir }}"
    sql_statement: "startup open;"
    ignore_ORA_errors: True
    output_as_array: True    
  register: sqlplusoutput1 

# Remove previous new wallet content for non-CDB database on target 
- name: Remove previous new wallet content for non-CDB database on target 
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  command: rm -rf {{ plug_temporal_tde_wallet_dir }}/*

# Create new wallet directory for non-CDB database on target
- name: Create new wallet directory for non-CDB database on target
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  file:
    path: "{{ plug_temporal_tde_wallet_dir }}" 
    state: directory
    owner: "{{ oracle_user }}"

# Create new wallet for non-CDB database on target 
- name: Create new wallet for non-CDB database on target 
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  oracle_sqlplus_module:
    oracle_sid: "{{ oracle_source_database_sid }}"
    oracle_home: "{{ oracle_target_ohome_dir }}"
    sql_statement: "ADMINISTER KEY MANAGEMENT CREATE KEYSTORE '{{ plug_temporal_tde_wallet_dir }}' IDENTIFIED BY {{ plug_temporal_tde_wallet_password }};"
    ignore_ORA_errors: True
    output_as_array: True    
  register: sqlplusoutput2

# Create new wallet backup directory on target 
- name: Create new wallet backup directory on target 
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  file:
    path: "{{ plug_temporal_tde_wallet_dir }}/backup" 
    state: directory
    owner: "{{ oracle_user }}"

# Copy new wallet's ewallet.p12 and cwallet.sso to backup directory on target 
- name: Copy new wallet's ewallet.p12 and cwallet.sso to backup directory on target
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}" 
  command: cp {{ plug_temporal_tde_wallet_dir }}/{{ item }} {{ plug_temporal_tde_wallet_dir }}/backup/
  with_items:
   - "ewallet.p12"
   - "cwallet.sso"

# Merge old and new wallet for non-CDB database on target (non-ExaCS)
- name: Merge old and new wallet for non-CDB database on target (non-ExaCS)
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  oracle_sqlplus_module:
    oracle_sid: "{{ oracle_source_database_sid }}"
    oracle_home: "{{ oracle_target_ohome_dir }}"
    sql_statement: "ADMINISTER KEY MANAGEMENT MERGE KEYSTORE '{{ oracle_target_wallet_dir }}/{{ oracle_target_database_unique_name }}' INTO EXISTING KEYSTORE '{{ plug_temporal_tde_wallet_dir }}' IDENTIFIED BY {{ plug_temporal_tde_wallet_password }} WITH BACKUP;"
    ignore_ORA_errors: True
    output_as_array: True    
  register: sqlplusoutput3
  when: (convert_to_ExaCS == 'False')

# Merge old and new wallet for non-CDB database on target (ExaCS)
- name: Merge old and new wallet for non-CDB database on target (ExaCS)
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  oracle_sqlplus_module:
    oracle_sid: "{{ oracle_source_database_sid }}"
    oracle_home: "{{ oracle_target_ohome_dir }}"
    sql_statement: "ADMINISTER KEY MANAGEMENT MERGE KEYSTORE '{{ oracle_target_wallet_dir }}' INTO EXISTING KEYSTORE '{{ plug_temporal_tde_wallet_dir }}' IDENTIFIED BY {{ plug_temporal_tde_wallet_password }} WITH BACKUP;"
    ignore_ORA_errors: True
    output_as_array: True    
  register: sqlplusoutput4
  when: (convert_to_ExaCS == 'True')  

# Remove old wallet's cwallet.sso file (non-ExaCS)
- name: Remove old wallet's cwallet.sso file (non-ExaCS)
  become: yes
  become_method: sudo
  become_user: "{{ oracle_user }}"
  file:
    state: absent
    path: "{{ oracle_target_wallet_dir }}/{{ oracle_target_database_unique_name }}/cwallet.sso"
  when: (convert_to_ExaCS == 'False')

# Remove old wallet's cwallet.sso file (ExaCS)
- name: Remove old wallet's cwallet.sso file (ExaCS)
  become: yes
  become_method: sudo
  become_user: "{{ oracle_user }}"
  file:
    state: absent
    path: "{{ oracle_target_wallet_dir }}/cwallet.sso"
  when: (convert_to_ExaCS == 'True')

# Close old autologin wallet for non-CDB database on target
- name: Close old autologin wallet for non-CDB database on target
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  oracle_sqlplus_module:
    oracle_sid: "{{ oracle_source_database_sid }}"
    oracle_home: "{{ oracle_target_ohome_dir }}"
    sql_statement: "ADMINISTER KEY MANAGEMENT SET KEYSTORE CLOSE;"
    ignore_ORA_errors: True
    output_as_array: True    
  register: sqlplusoutput5

# Backup sqlnet.ora for non-CDB database on target
- name: Backup sqlnet.ora for non-CDB database on target
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  command: mv {{ oracle_target_ohome_dir }}/network/admin/sqlnet.ora {{ oracle_target_ohome_dir }}/network/admin/sqlnet.ora.bck

# Upload sqlnet.ora file for new wallet non-CDB database on target
- name: Upload sqlnet.ora file for new wallet non-CDB database on target
  become: yes
  become_method: sudo  
  template:
    src: "../templates/sqlnet.ora.j2"
    dest: "{{ oracle_target_ohome_dir }}/network/admin/sqlnet.ora"
    owner: "{{ oracle_user }}"

# Shutdown of non-CDB database on target 
- name: Shutdown of non-CDB database on target 
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  oracle_sqlplus_module:
    oracle_sid: "{{ oracle_source_database_sid }}"
    oracle_home: "{{ oracle_target_ohome_dir }}"
    sql_statement: "shutdown immediate;"
    ignore_ORA_errors: True
    output_as_array: True    
  register: sqlplusoutput6 

# Startup non-CDB database on target 
- name: Startup non-CDB database on target 
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  oracle_sqlplus_module:
    oracle_sid: "{{ oracle_source_database_sid }}"
    oracle_home: "{{ oracle_target_ohome_dir }}"
    sql_statement: "startup open;"
    ignore_ORA_errors: True
    output_as_array: True    
  register: sqlplusoutput7 

# Open password based new wallet for non-CDB database on target
- name: Open password based new wallet for non-CDB database on target
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  oracle_sqlplus_module:
    oracle_sid: "{{ oracle_source_database_sid }}"
    oracle_home: "{{ oracle_target_ohome_dir }}"
    sql_statement: "ADMINISTER KEY MANAGEMENT SET KEYSTORE OPEN IDENTIFIED BY {{ plug_temporal_tde_wallet_password }};"
    ignore_ORA_errors: True
    output_as_array: True    
  register: sqlplusoutput8

# Remove TDE export file just in case on target
- name: Remove TDE export file just in case on target
  become: yes
  become_method: sudo
  become_user: "{{ oracle_user }}"
  file:
    state: absent
    path: "{{ plug_temporal_tde_wallet_dir }}/{{ oracle_source_database_sid }}_tde.key"

# Export the wallet from non-CDB database on target
- name: Export the wallet from non-CDB database on target
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  oracle_sqlplus_module:
    oracle_sid: "{{ oracle_source_database_sid }}"
    oracle_home: "{{ oracle_target_ohome_dir }}"
    sql_statement: "ADMINISTER KEY MANAGEMENT EXPORT ENCRYPTION KEYS WITH SECRET \"{{ plug_temporal_tde_wallet_password }}\" TO '{{ plug_temporal_tde_wallet_dir }}/{{ oracle_source_database_sid }}_tde.key' IDENTIFIED BY {{ plug_temporal_tde_wallet_password }};"
    ignore_ORA_errors: True
    output_as_array: True    
  register: sqlplusoutput9

# Move back original sqlnet.ora for non-CDB database on target
- name: Move back original sqlnet.ora for non-CDB database on target
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  command: mv {{ oracle_target_ohome_dir }}/network/admin/sqlnet.ora.bck {{ oracle_target_ohome_dir }}/network/admin/sqlnet.ora

# Copy back old wallet's ewallet.p12 and cwallet.sso to backup directory on target (non-ExaCS)
- name: Copy old wallet's ewallet.p12 and cwallet.sso to backup directory on target (non-ExaCS)
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  command: cp {{ oracle_target_wallet_dir }}/{{ oracle_target_database_unique_name }}/backup/{{ item }} {{ oracle_target_wallet_dir }}/{{ oracle_target_database_unique_name }}/
  with_items:
   - "ewallet.p12"
   - "cwallet.sso"
  when: (convert_to_ExaCS == 'False') 

# Copy back old wallet's ewallet.p12 and cwallet.sso to backup directory on target (ExaCS)
- name: Copy old wallet's ewallet.p12 and cwallet.sso to backup directory on target (ExaCS)
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  command: cp {{ oracle_target_wallet_dir }}/backup/{{ item }} {{ oracle_target_wallet_dir }}
  with_items:
   - "ewallet.p12"
   - "cwallet.sso"
  when: (convert_to_ExaCS == 'True') 

# Shutdown non-CDB database on target 
- name: Shutdown non-CDB database on target 
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  oracle_sqlplus_module:
    oracle_sid: "{{ oracle_source_database_sid }}"
    oracle_home: "{{ oracle_target_ohome_dir }}"
    sql_statement: "startup open;"
    ignore_ORA_errors: True
    output_as_array: True    
  register: sqlplusoutput10

# Startup non-CDB database on target 
- name: Startup non-CDB database on target 
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  oracle_sqlplus_module:
    oracle_sid: "{{ oracle_source_database_sid }}"
    oracle_home: "{{ oracle_target_ohome_dir }}"
    sql_statement: "startup open;"
    ignore_ORA_errors: True
    output_as_array: True    
  register: sqlplusoutput11

# Remove new wallet for non-CDB database on target 
- name: Remove new wallet for non-CDB database on target 
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  command: rm -rf {{ plug_temporal_tde_wallet_dir }}/*

# Collect wallet status for non-CDB on target
- name: Collect wallet status for non-CDB on target
  become: yes
  become_method: sudo  
  become_user: "{{ oracle_user }}"
  oracle_sqlplus_module:
    oracle_sid: "{{ oracle_source_database_sid }}"
    oracle_home: "{{ oracle_target_ohome_dir }}"
    oracle_unqname: "{{ oracle_source_database_sid }}"
    sql_statement: "SELECT STATUS FROM v$encryption_wallet;"
    ignore_ORA_errors: True
    output_as_array: True    
  register: sqlplusoutput12

# Set fact for non-cdb_wallet_status
- name: Set fact for nop-cdb_wallet_status
  set_fact:
    non-cdb_wallet_status: "{{ sqlplusoutput12.sqlplus_message[0][0] }}"

# Show non-cdb_wallet_status on target
- name: Show non-cdb_wallet_status on target
  debug:
    msg: "Non-CDB: {{ oracle_source_database_sid }} - TDE wallet status is {{ non-cdb_wallet_status }}"

